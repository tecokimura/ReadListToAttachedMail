<?php
/**
 * Created by PhpStorm.
 * User: kimura
 * Date: 2016/11/27
 * Time: 13:52
 */
require_once dirname(__DIR__) . DIRECTORY_SEPARATOR . 'rltam.php';

class RltamTest extends PHPUnit_Framework_TestCase
{
    
    public function setUp()
    {
        // parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    public function tearDown()
    {
        // parent::tearDown(); // TODO: Change the autogenerated stub
    }
    
    
    /**
     * @runInSparateProcess
     * @preserveGlobalState
     */
    public function testDefine()
    {
        // $this->assertFalse($this->member->isEnabled());
        $this->assertEquals(0, constant('ARGV_INDEX_PHP_FNAME'));
        $this->assertEquals(1, constant('ARGV_INDEX_CONF_FNAME'));
        $this->assertEquals(2, constant('ARGV_INDEX_SMTP_SERVER'));
        $this->assertEquals(3, constant('ARGV_INDEX_SMTP_PORT_NO'));
        $this->assertEquals(4, constant('ARGV_INDEX_MAX'));
        
        $this->assertStringMatchesFormat("%s@%s", constant('MAIL_FROM'));
        
        $this->assertStringMatchesFormat("%s", constant('OS_ENC'));
        
    }
    
    /**
     * @expectedException ArgvException
     */
    public function testArgvException() {
        getPhpOption(array());
    }
    
    
    /**
     * @expectedException ArgvConfFileException
     */
    public function testArgvConfFileException() {
        $data = [
            'aaa.php',
            'bbb.conf',
            '',
            '',
        ];
    
        getPhpOption($data);
    }
    
    /**
     * @expectedException ArgvSmtpServerException
     */
    public function testArgvSmtpServerException() {
        
        $data = [
            'rltam.php',
            'tests/RltamTest.php',
            'smtp.server.jp#',
            '',
        ];
    
        getPhpOption($data);
    }
    
    /**
     * @expectedException ArgvSmtpPortException
     */
    public function testArgvSmtpPortException() {
        
        $data = [
            'rltam.php',
            'tests/RltamTest.php',
            'smtp.server.jp',
            'abc',
        ];
        
        getPhpOption($data);
    }
    
    
    /**
     *
     */
    public function testGetPhpOption() {
        
        $data = [
            'rltam.php',
            'tests/RltamTest.php',
            'smtp.server.jp',
            '123',
        ];
        
        $result = getPhpOption($data);
    
        // ファイルが存在するか
        $this->assertFileExists($result[ARGV_INDEX_PHP_FNAME]);
        
        // ファイルが存在するか
        $this->assertFileExists($result[ARGV_INDEX_CONF_FNAME]);
        
        // 正規表現に通るかどうか
        $this->assertRegExp(
            '/^[a-zA-Z][a-zA-Z0-9\.\-]+[a-zA-Z]$/',
            $result[ARGV_INDEX_SMTP_SERVER]
        );
        
        // intの値かどうか
        $this->assertInternalType(
            PHPUnit_Framework_Constraint_IsType::TYPE_INT,
            $result[ARGV_INDEX_SMTP_PORT_NO]
        );

    }
    
    
    public function testBbb() {
//        public function testRead() {
//            $fh = tmpfile();
//            $path = stream_get_meta_data($fh)['uri'];
//            fwrite($fh, '東京' . PHP_EOL . '埼玉' . PHP_EOL . '大阪' . PHP_EOL);
//            // ここでfclose()するとファイルが消失するので注意
//            $this->assertEquals(
//                ['東京' . PHP_EOL, '埼玉' . PHP_EOL, '大阪' . PHP_EOL],
//                (new Hoge())->read($path)
//            );
//        }
        
        $fh = tmpfile();
        $path = stream_get_meta_data($fh)['uri'];
        fwrite($fh, __DIR__. 'tecokimura, tecokimura@gmail.com'.PHP_EOL);
        
        // ファイル読み込みをやってみる
                
        
    }
}