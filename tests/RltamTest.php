<?php
/**
 * Created by PhpStorm.
 * User: kimura
 * Date: 2016/11/27
 * Time: 13:52
 */
require_once dirname(__DIR__) . DIRECTORY_SEPARATOR . 'rltam.php';

use Monolog\Logger;

class RltamTest extends PHPUnit_Framework_TestCase
{
    private $tfp;       // Tmp File Pointer
    private $tfpath;    // Tmp File PATH
    
    public function setUp()
    {
        // parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    public function tearDown()
    {
        // parent::tearDown(); // TODO: Change the autogenerated stub
    }
    
    
    /**
     * @runInSparateProcess
     * @preserveGlobalState
     */
    public function testDefine()
    {
        // $this->assertFalse($this->member->isEnabled());
        $this->assertEquals(0, constant('ARGV_INDEX_PHP_FNAME'));
        $this->assertEquals(1, constant('ARGV_INDEX_CONF_FNAME'));
        $this->assertEquals(2, constant('ARGV_INDEX_SMTP_SERVER'));
        $this->assertEquals(3, constant('ARGV_INDEX_SMTP_PORT_NO'));
        $this->assertEquals(4, constant('ARGV_INDEX_MAX'));
        
        $this->assertStringMatchesFormat("%s@%s", constant('MAIL_FROM'));
        
        $this->assertStringMatchesFormat("%s", constant('OS_ENC'));
        
    }
    
    /**
     * @expectedException ArgvException
     */
    public function testArgvException()
    {
        getPhpOption(array());
    }
    
    
    /**
     * @expectedException ArgvConfFileException
     */
    public function testArgvConfFileException()
    {
        $data = [
            'aaa.php',
            'bbb.conf',
            '',
            '',
        ];
        
        getPhpOption($data);
    }
    
    /**
     * @expectedException ArgvSmtpServerException
     */
    public function testArgvSmtpServerException()
    {
        
        $data = [
            'rltam.php',
            'tests/RltamTest.php',
            'smtp.server.jp#',
            '',
        ];
        
        getPhpOption($data);
    }
    
    /**
     * @expectedException ArgvSmtpPortException
     */
    public function testArgvSmtpPortException()
    {
        
        $data = [
            'rltam.php',
            'tests/RltamTest.php',
            'smtp.server.jp',
            'abc',
        ];
        
        getPhpOption($data);
    }
    
    
    /**
     *
     */
    public function testGetPhpOption()
    {
        
        $data = [
            'rltam.php',
            'tests/RltamTest.php',
            'smtp.server.jp',
            '123',
        ];
        
        $result = getPhpOption($data);
        
        // ファイルが存在するか
        $this->assertFileExists($result[ARGV_INDEX_PHP_FNAME]);
        
        // ファイルが存在するか
        $this->assertFileExists($result[ARGV_INDEX_CONF_FNAME]);
        
        // 正規表現に通るかどうか
        $this->assertRegExp(
            '/^[a-zA-Z][a-zA-Z0-9\.\-]+[a-zA-Z]$/',
            $result[ARGV_INDEX_SMTP_SERVER]
        );
        
        // intの値かどうか
        $this->assertInternalType(
            PHPUnit_Framework_Constraint_IsType::TYPE_INT,
            $result[ARGV_INDEX_SMTP_PORT_NO]
        );
        
    }
    
    
    /**
     * メールアドレスチェックのテスト
     */
    public function testRegCheckFormatMail() {

        $this->assertTrue(checkFormatMail('aaa@bbb.co.jp') );
        $this->assertTrue(checkFormatMail('aaa@gmail.com') );
        $this->assertTrue(checkFormatMail('aaa.bbb@abc.jp') );
        $this->assertTrue(checkFormatMail('aaa@bbb.co.jp') );
        $this->assertTrue(checkFormatMail('aaa@bbb.co.jp') );
        $this->assertTrue(checkFormatMail('aaa@bbb.cc.dd.ee') );
    
        $this->assertFalse(checkFormatMail('aaa-bbb.co.jp') );
        $this->assertFalse(checkFormatMail('a-b@a') );
        $this->assertFalse(checkFormatMail('@abc.jp') );
        $this->assertFalse(checkFormatMail('aaa@@@abc.jp') );
    }
    
    
    private function getTmpfilePath($fp) {
        return stream_get_meta_data($fp)['uri'];
    }
    
    
    /**
     * 設定ファイルが正しい場合のテスト
     */
    public function testReadConfigFileIsOk()
    {
        $log = getLog(Logger::DEBUG);
        
        $fh = tmpfile();
        $path = $this->getTmpfilePath($fh);
        fwrite($fh, $this->getTmpFileData(self::TFDPN_OK, 'Shift-JIS'));
        
        // ファイル読み込み
        $data = readConfigFile($path, $log, false);
        
        // 内容データの確認
        $this->assertTrue( $data->isEnabled() );
        $this->assertEquals($data->getDirPath(), __DIR__);
        $this->assertEquals(count($data->getListMember()), 4);
        $this->assertEmpty($data->getArySkipData());
    }
    
    
    /**
     * 設定ファイルが正しくコメントアウトされている場合のテスト
     */
    public function testReadConfigFileIsOkCommentOut()
    {
        $log = getLog(Logger::DEBUG);
        
        $fh = tmpfile();
        $path = $this->getTmpfilePath($fh);
        fwrite($fh, $this->getTmpFileData(self::TFDPN_OK_COMMENT_OUT, 'Shift-JIS'));
        
        // ファイル読み込み
        $data = readConfigFile($path, $log, false);

        // 内容データの確認
        $this->assertTrue( $data->isEnabled() );
        $this->assertEquals($data->getDirPath(), __DIR__);
        $this->assertEmpty($data->getListMember());
        $this->assertEquals(count($data->getArySkipData()), count(getPassHeadAry()));
    }
    
    
    /**
     * 設定ファイルに書くメールアドレスのフォーマットが間違っている場合のテスト
     */
    public function testReadConfigFileIsNgMailFormat()
    {
        $log = getLog(Logger::DEBUG);
        
        $fh = tmpfile();
        $path = $this->getTmpfilePath($fh);
        fwrite($fh, $this->getTmpFileData(self::TFDPN_NG_MAIL_FORMAT, 'Shift-JIS'));
        
        // ファイル読み込み
        $data = readConfigFile($path, $log, false);

        // 内容データの確認
        $this->assertTrue( $data->isEnabled() );
        $this->assertEquals($data->getDirPath(), __DIR__);
        $this->assertEmpty($data->getListMember());
        $this->assertEquals(count($data->getArySkipData()), 3);
    }
    
    
    // getTmpFileData Pattern no
    const TFDPN_NG_MAIL_FORMAT = -1;
    const TFDPN_OK = 0;
    const TFDPN_OK_COMMENT_OUT = 1;
    public function getTmpFileData($ptnNo = self::TFDPN_OK, $toEncode = '')
    {
        
        $ret = "";
        
        switch ($ptnNo) {
            case self::TFDPN_OK:
                // 正常
                $ret = __DIR__ . PHP_EOL
                    . 'tecokimura, tecokimura@gmail.com' . PHP_EOL
                    . 'テコ木村, teco.kimura@gmail.com' . PHP_EOL
                    . 'teco木村, teco-kimura@gmail.com' . PHP_EOL
                    . 'テコ　木村, teco123kimura@gmail.com' . PHP_EOL
                ;
                break;
            
            case self::TFDPN_OK_COMMENT_OUT:
                // コメントアウト
                $ret = __DIR__ . PHP_EOL
                    . '// テコ　木村, teco123kimura@gmail.com' . PHP_EOL
                    . "\tテコ　木村, teco123kimura@gmail.com" . PHP_EOL
                ;
                break;
            
            case self::TFDPN_NG_MAIL_FORMAT:
                $ret = __DIR__ . PHP_EOL
                    . 'テコ　木村, tecokimura@@@gmail.com' . PHP_EOL
                    . 'テコ　木村, tecokimuragmail.com' . PHP_EOL
                    . 'テコ　木村, tecokimura==gmail.com' . PHP_EOL
                ;
                break;
            
            default:
                break;
            
        }
        
        
        if (empty($toEncode)) {
            // UTFを使う
            return $ret;
        } else {
            // 指定された文字コードで変換する
            return mb_convert_encoding($ret, $toEncode);
        }
    }
}